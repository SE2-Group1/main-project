name: "CI"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs: 
  checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [client, server]
    name: "Check: ${{ matrix.check }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: npm run install-all
      - name: Run check
        run: npm run ${{ matrix.check }}:check
    
  tests:
    name: "Run server tests"
    runs-on: ubuntu-latest
    services:
      db:
        image: postgis/postgis:17-3.5
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        options: >-
          --health-cmd pg_isready
          --health-interval 1s
          --health-timeout 5s
          --health-retries 10
    steps: 
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - name: Remove package-lock.json
        run: rm -f package-lock.json
        working-directory: ./server
      - name: Install server dependencies
        working-directory: ./server
        run: npm install
      - name: Wait for db to be ready
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: Run tests
        working-directory: ./server
        run: npm test

  client-build:
    runs-on: ubuntu-latest
    name: "Build client"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - name: Remove package-lock.json
        run: rm -f package-lock.json
        working-directory: ./client
      - name: Install client dependencies
        working-directory: ./client
        run: npm install
      - name: Build client
        working-directory: ./client
        run: npm run build
  sonarcloud:
    name: SonarQube Cloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
